Open In Colab
#Importing Libraries
#Basic libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

#Fetaure Selection
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
#Modelling Algoritm
from sklearn.cluster import KMeans

#Model Evaluation
from yellowbrick.cluster import SilhouetteVisualizer
#Importing dataset
olist_orders = pd.read_csv('olist_orders_dataset.csv')
olist_products = pd.read_csv('olist_products_dataset.csv')
olist_items = pd.read_csv('olist_order_items_dataset.csv')
olist_customers = pd.read_csv('olist_customers_dataset.csv')
olist_payments = pd.read_csv('olist_order_payments_dataset.csv')
olist_sellers = pd.read_csv('olist_sellers_dataset.csv')
olist_geolocation = pd.read_csv('olist_geolocation_dataset.csv')
olist_reviews = pd.read_csv('olist_order_reviews_dataset.csv')
olist_product_category_name = pd.read_csv('product_category_name_translation.csv') #Untuk menerjemahkan dari bahasa Brazil ke Bahasa Inggris
#Menggabungkan semua data-data 
all_data = olist_orders.merge(olist_items, on='order_id', how='left')
all_data = all_data.merge(olist_payments, on='order_id', how='inner')
all_data = all_data.merge(olist_reviews, on='order_id', how='inner')
all_data = all_data.merge(olist_products, on='product_id', how='inner')
all_data = all_data.merge(olist_customers, on='customer_id', how='inner')
all_data = all_data.merge(olist_sellers, on='seller_id', how='inner')
all_data = all_data.merge(olist_product_category_name,on='product_category_name',how='inner')
#all_data = all_data.merge(olist_geolocation, on='seller_zip_code_prefix', how='inner')
#Melihat berapa persen data yang kosong pad setiap kolomnya
round((all_data.isnull().sum()/ len(all_data)*100),2)
order_id                          0.00
customer_id                       0.00
order_status                      0.00
order_purchase_timestamp          0.00
order_approved_at                 0.01
order_delivered_carrier_date      1.03
order_delivered_customer_date     2.08
order_estimated_delivery_date     0.00
order_item_id                     0.00
product_id                        0.00
seller_id                         0.00
shipping_limit_date               0.00
price                             0.00
freight_value                     0.00
payment_sequential                0.00
payment_type                      0.00
payment_installments              0.00
payment_value                     0.00
review_id                         0.00
review_score                      0.00
review_comment_title             88.06
review_comment_message           57.70
review_creation_date              0.00
review_answer_timestamp           0.00
product_category_name             0.00
product_name_lenght               0.00
product_description_lenght        0.00
product_photos_qty                0.00
product_weight_g                  0.00
product_length_cm                 0.00
product_height_cm                 0.00
product_width_cm                  0.00
customer_unique_id                0.00
customer_zip_code_prefix          0.00
customer_city                     0.00
customer_state                    0.00
seller_zip_code_prefix            0.00
seller_city                       0.00
seller_state                      0.00
product_category_name_english     0.00
dtype: float64
#Melihat info yang ada pada data baik jumlah kolom, input sampai memori
all_data.info()
<class 'pandas.core.frame.DataFrame'>
Int64Index: 115609 entries, 0 to 115608
Data columns (total 40 columns):
 #   Column                         Non-Null Count   Dtype  
---  ------                         --------------   -----  
 0   order_id                       115609 non-null  object 
 1   customer_id                    115609 non-null  object 
 2   order_status                   115609 non-null  object 
 3   order_purchase_timestamp       115609 non-null  object 
 4   order_approved_at              115595 non-null  object 
 5   order_delivered_carrier_date   114414 non-null  object 
 6   order_delivered_customer_date  113209 non-null  object 
 7   order_estimated_delivery_date  115609 non-null  object 
 8   order_item_id                  115609 non-null  float64
 9   product_id                     115609 non-null  object 
 10  seller_id                      115609 non-null  object 
 11  shipping_limit_date            115609 non-null  object 
 12  price                          115609 non-null  float64
 13  freight_value                  115609 non-null  float64
 14  payment_sequential             115609 non-null  int64  
 15  payment_type                   115609 non-null  object 
 16  payment_installments           115609 non-null  int64  
 17  payment_value                  115609 non-null  float64
 18  review_id                      115609 non-null  object 
 19  review_score                   115609 non-null  int64  
 20  review_comment_title           13801 non-null   object 
 21  review_comment_message         48906 non-null   object 
 22  review_creation_date           115609 non-null  object 
 23  review_answer_timestamp        115609 non-null  object 
 24  product_category_name          115609 non-null  object 
 25  product_name_lenght            115609 non-null  float64
 26  product_description_lenght     115609 non-null  float64
 27  product_photos_qty             115609 non-null  float64
 28  product_weight_g               115608 non-null  float64
 29  product_length_cm              115608 non-null  float64
 30  product_height_cm              115608 non-null  float64
 31  product_width_cm               115608 non-null  float64
 32  customer_unique_id             115609 non-null  object 
 33  customer_zip_code_prefix       115609 non-null  int64  
 34  customer_city                  115609 non-null  object 
 35  customer_state                 115609 non-null  object 
 36  seller_zip_code_prefix         115609 non-null  int64  
 37  seller_city                    115609 non-null  object 
 38  seller_state                   115609 non-null  object 
 39  product_category_name_english  115609 non-null  object 
dtypes: float64(11), int64(5), object(24)
memory usage: 36.2+ MB
#Mengubah tipe data pada kolom tanggal agar seusai tipe datanya 
date_columns = ['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date',
             'order_estimated_delivery_date', 'shipping_limit_date', 'review_creation_date', 'review_answer_timestamp'] 
for col in date_columns:
    all_data[col] = pd.to_datetime(all_data[col], format='%Y-%m-%d %H:%M:%S')
#Melihat apakah ada data yang duplikat
print('Data yang duplikat: ',all_data.duplicated().sum())
#Membuat kolom Month_order untuk data exploration
all_data['Month_order'] = all_data['order_purchase_timestamp'].dt.to_period('M').astype('str')
#Memilih input mulai dari 01-2017 sampai 08-2018
#Karena terdapat data yang kurang seimbang dengan rata-rata setiap bulan pada data sebelum 01-2017 dan setelah 08-2018
#berdasarkan data pembelian / order_purchase_timestamp
start_date = "2017-01-01"
end_date = "2018-08-31"

after_start_date = all_data['order_purchase_timestamp'] >= start_date
before_end_date = all_data['order_purchase_timestamp'] <= end_date
between_two_dates = after_start_date & before_end_date
all_data = all_data.loc[between_two_dates]
#Membagi data berdasarkan tipe datanya
only_numeric = all_data.select_dtypes(include=['int', 'float'])
only_object = all_data.select_dtypes(include=['object'])
only_time = all_data.select_dtypes(include=['datetime', 'timedelta'])
Data yang duplikat:  0
#Melihat berapa persen data yang kosong pad setiap kolomnya
round((all_data.isnull().sum()/ len(all_data)*100),2)
order_id                          0.00
customer_id                       0.00
order_status                      0.00
order_purchase_timestamp          0.00
order_approved_at                 0.01
order_delivered_carrier_date      1.00
order_delivered_customer_date     2.04
order_estimated_delivery_date     0.00
order_item_id                     0.00
product_id                        0.00
seller_id                         0.00
shipping_limit_date               0.00
price                             0.00
freight_value                     0.00
payment_sequential                0.00
payment_type                      0.00
payment_installments              0.00
payment_value                     0.00
review_id                         0.00
review_score                      0.00
review_comment_title             88.02
review_comment_message           57.81
review_creation_date              0.00
review_answer_timestamp           0.00
product_category_name             0.00
product_name_lenght               0.00
product_description_lenght        0.00
product_photos_qty                0.00
product_weight_g                  0.00
product_length_cm                 0.00
product_height_cm                 0.00
product_width_cm                  0.00
customer_unique_id                0.00
customer_zip_code_prefix          0.00
customer_city                     0.00
customer_state                    0.00
seller_zip_code_prefix            0.00
seller_city                       0.00
seller_state                      0.00
product_category_name_english     0.00
Month_order                       0.00
dtype: float64
#Menangani input yang kosong pada kolom order_approved_at 
missing_1 = all_data['order_approved_at'] - all_data['order_purchase_timestamp']
print(missing_1.describe())
print('='*50)
print('Median dari waktu order sampai approved: ',missing_1.median())

#kita ambil median karena ada yang langsung di approve dari waktu dia order,ada juga yang sampai 60 hari
add_1 = all_data[all_data['order_approved_at'].isnull()]['order_purchase_timestamp'] + missing_1.median()
all_data['order_approved_at']= all_data['order_approved_at'].replace(np.nan, add_1)
count                       115213
mean     0 days 10:27:15.450209611
std      0 days 21:54:28.082325303
min                0 days 00:00:00
25%                0 days 00:12:56
50%                0 days 00:20:45
75%                0 days 14:54:28
max               60 days 10:51:59
dtype: object
==================================================
Median dari waktu order sampai approved:  0 days 00:20:45
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-20-5b723946b073> in <module>()
      7 #kita ambil median karena ada yang langsung di approve dari waktu dia order,ada juga yang sampai 60 hari
      8 add_1 = all_data[all_data['order_approved_at'].isnull()]['order_purchase_timestamp'] + missing_1.median()
----> 9 all_data['order_approved_at']= all_data['order_approved_at'].replace(np.nan, add_1)

/usr/local/lib/python3.7/dist-packages/pandas/core/series.py in replace(self, to_replace, value, inplace, limit, regex, method)
   4872             limit=limit,
   4873             regex=regex,
-> 4874             method=method,
   4875         )
   4876 

/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py in replace(self, to_replace, value, inplace, limit, regex, method)
   6600                     if self.ndim == 1:
   6601                         raise ValueError(
-> 6602                             "Series.replace cannot use dict-value and "
   6603                             "non-None to_replace"
   6604                         )

ValueError: Series.replace cannot use dict-value and non-None to_replace
#Menangani input yang kosong pada kolom order_approved_at 
all_data[['order_purchase_timestamp', 'order_approved_at', 'order_delivered_carrier_date', 'order_delivered_customer_date']].head()
order_purchase_timestamp	order_approved_at	order_delivered_carrier_date	order_delivered_customer_date
0	2017-10-02 10:56:33	2017-10-02 11:07:15	2017-10-04 19:55:00	2017-10-10 21:25:13
1	2017-10-02 10:56:33	2017-10-02 11:07:15	2017-10-04 19:55:00	2017-10-10 21:25:13
2	2017-10-02 10:56:33	2017-10-02 11:07:15	2017-10-04 19:55:00	2017-10-10 21:25:13
3	2017-08-15 18:29:31	2017-08-15 20:05:16	2017-08-17 15:28:33	2017-08-18 14:44:43
4	2017-08-02 18:24:47	2017-08-02 18:43:15	2017-08-04 17:35:43	2017-08-07 18:30:01
#Menangani input yang kosong pada kolom order_delivered_customer_date
missing_3 = all_data['order_delivered_customer_date'] - all_data['order_delivered_carrier_date']
print(missing_3.describe())
print('='*50)
print('Median dari waktu dikirim sampai diterima customer: ',missing_3.median())

#kita ambil median karena ada yang waktu pengiriman dalam -17 Hari berarti dia outliers,ada juga yang waktu pengiriman sampai 205 hari
add_3 = all_data[all_data['order_delivered_customer_date'].isnull()]['order_delivered_carrier_date'] + missing_3.median()
all_data['order_delivered_customer_date']= all_data['order_delivered_customer_date'].replace(np.nan, add_3)
count                       112873
mean     9 days 04:16:55.927095053
std      8 days 13:25:58.522268354
min             -17 days +21:41:31
25%                4 days 01:37:44
50%                7 days 01:29:46
75%               11 days 22:06:46
max              205 days 04:35:00
dtype: object
==================================================
Median dari waktu dikirim sampai diterima customer:  7 days 01:29:46
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-22-0ed6582f0df2> in <module>()
      7 #kita ambil median karena ada yang waktu pengiriman dalam -17 Hari berarti dia outliers,ada juga yang waktu pengiriman sampai 205 hari
      8 add_3 = all_data[all_data['order_delivered_customer_date'].isnull()]['order_delivered_carrier_date'] + missing_3.median()
----> 9 all_data['order_delivered_customer_date']= all_data['order_delivered_customer_date'].replace(np.nan, add_3)

/usr/local/lib/python3.7/dist-packages/pandas/core/series.py in replace(self, to_replace, value, inplace, limit, regex, method)
   4872             limit=limit,
   4873             regex=regex,
-> 4874             method=method,
   4875         )
   4876 

/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py in replace(self, to_replace, value, inplace, limit, regex, method)
   6600                     if self.ndim == 1:
   6601                         raise ValueError(
-> 6602                             "Series.replace cannot use dict-value and "
   6603                             "non-None to_replace"
   6604                         )

ValueError: Series.replace cannot use dict-value and non-None to_replace
#Menangani kolom review_comment_title dan review_comment_message
#Karena jumlah input yang kosong sangat banyak, dan tidak mungkin untuk diisi dikarenakan tidak ada variabel yang dapat
#digunakan untuk menghitungnya. Karena ini adalah komentar danjudul komentartnya
#Maka kita akan hilangkan kolom tersebut

all_data = all_data.drop(['review_comment_title', 'review_comment_message'], axis=1)
#Menangani input kosong pada kolom product_weight_g, product_length_cm, product_height_cm, product_width_cm
#Karena jumlahnya hanya 1, maka kita drop saja
all_data = all_data.dropna()

#Cek kembali apakah masih ada input yang kosong
round((all_data.isnull().sum()/len(all_data)*100),2)
order_id                         0.0
customer_id                      0.0
order_status                     0.0
order_purchase_timestamp         0.0
order_approved_at                0.0
order_delivered_carrier_date     0.0
order_delivered_customer_date    0.0
order_estimated_delivery_date    0.0
order_item_id                    0.0
product_id                       0.0
seller_id                        0.0
shipping_limit_date              0.0
price                            0.0
freight_value                    0.0
payment_sequential               0.0
payment_type                     0.0
payment_installments             0.0
payment_value                    0.0
review_id                        0.0
review_score                     0.0
review_creation_date             0.0
review_answer_timestamp          0.0
product_category_name            0.0
product_name_lenght              0.0
product_description_lenght       0.0
product_photos_qty               0.0
product_weight_g                 0.0
product_length_cm                0.0
product_height_cm                0.0
product_width_cm                 0.0
customer_unique_id               0.0
customer_zip_code_prefix         0.0
customer_city                    0.0
customer_state                   0.0
seller_zip_code_prefix           0.0
seller_city                      0.0
seller_state                     0.0
product_category_name_english    0.0
Month_order                      0.0
dtype: float64
#Menyesuaikan tipe data dengan input datanya
all_data = all_data.astype({'order_item_id': 'int64', 
                            'product_name_lenght': 'int64',
                            'product_description_lenght':'int64', 
                            'product_photos_qty':'int64'})
#Membuat kolom order_process_time untuk melihat berapa lama waktu yang dibutuhkan dari mulai order sampai
#barang diterima oleh customer
all_data['order_process_time'] = all_data['order_delivered_customer_date'] - all_data['order_purchase_timestamp']

#Membuat kolom order_delivery_time untuk melihat berapa lama waktu pengiriman yang dibutuhkan tiap order
all_data['order_delivery_time'] = all_data['order_delivered_customer_date'] - all_data['order_delivered_carrier_date']

#Membuat kolom order_time_accuracy untuk melihat apakah dari estimasi waktu sampai ada yang sesuai atau terlambat
#Jika nilainya + positive, maka dia lebih cepat sampai, jika 0 maka dia tepat waktu, namun jika - negatif maka dia terlambat
all_data['order_accuracy_time'] = all_data['order_estimated_delivery_date'] - all_data['order_delivered_customer_date'] 

#Membuat kolom order_approved_time untuk melihat berapa lama waktu yang dibutuhkan mulai dari order sampai approved
all_data['order_approved_time'] = all_data['order_approved_at'] - all_data['order_purchase_timestamp'] 

#Membuat kolom review_send_timeuntuk mengetahui berapa lama waktu dikirimnya survey kepuasan setelah barang diterima
all_data['review_send_time'] = all_data['review_creation_date'] - all_data['order_delivered_customer_date']

#Membuat kolom review_answer_time untuk mengetahui berapa lama waktu yang dibutuhkan untuk mengisi review setelah
#dikirim survey kepuasan pelanggan.
all_data['review_answer_time'] = all_data['review_answer_timestamp'] - all_data['review_creation_date']

#Menggabungkan kolom product_length_cm, product_height_cm, dan product_width_cm untuk membuatnya menjadi volume
#dengan kolom baru yaitu product_volume
all_data['product_volume'] = all_data['product_length_cm'] * all_data['product_height_cm'] * all_data['product_width_cm']
#Produk apa yang paling laris?
top_20_product_best_seller = all_data['order_item_id'].groupby(all_data['product_category_name_english']).sum().sort_values(ascending=False)[:20]
#print(top_20_product_best_seller)

#Kita plot untuk visualisasinya
fig=plt.figure(figsize=(16,9))
sns.barplot(y=top_20_product_best_seller.index,x=top_20_product_best_seller.values)
plt.title('Top 20 Most Selling Product',fontsize=20)
plt.xlabel('Total Product Sold',fontsize=17)
plt.ylabel('Product category',fontsize=17)
Text(0, 0.5, 'Product category')

#Kota mana yang paling banyak belanja?
top_20_city_shopping = all_data['order_item_id'].groupby(all_data['customer_city']).sum().sort_values(ascending=False)[:20]
#print(top_20_city_shopping)

#Kita plot untuk visualisasinya
fig=plt.figure(figsize=(16,9))
sns.barplot(y=top_20_city_shopping.index,x=top_20_city_shopping.values)
plt.title('Top 20 Most City Shopping',fontsize=20)
plt.xlabel('Total Product',fontsize=17)
plt.ylabel('City',fontsize=17)
Text(0, 0.5, 'City')

#Siapa customer paling banyak belanja berdasarkan jumlah order?
top_10_customer_shopping = all_data['order_item_id'].groupby(all_data['customer_id']).count().sort_values(ascending=False)[:10]
#print(top_10_customer_shopping)

#Kita plot untuk visualisasinya
fig=plt.figure(figsize=(16,9))
sns.barplot(y=top_10_customer_shopping.index,x=top_10_customer_shopping.values)
plt.title('Top 10 Customer Based on Order Amount',fontsize=20)
plt.xlabel('Amount of Product',fontsize=17)
plt.ylabel('Customer ID',fontsize=17)
Text(0, 0.5, 'Customer ID')

#Berapa median waktu dari order sampai diterima yang dibutuhkan dalam setiap order perbulanya?
order_time_by_month = all_data['order_process_time'].groupby(all_data['Month_order']).median(numeric_only=False) #masukan argumen numeric_only untuk menghitung timedelta

#Membuat visualisasinya
fig=plt.figure(figsize=(16,9))
plt.plot(order_time_by_month.index, order_time_by_month.values, marker='o')
plt.title('Median Order Time By Month',fontsize=20)
plt.xlabel('Month',fontsize=17)
plt.xticks(#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
#         ['January', 'February', 'March','April', 'Mei', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
          rotation=90)
plt.ylabel('Time (Day)',fontsize=17)
Text(0, 0.5, 'Time (Day)')

#Berapa median waktu pengiriman yang dibutuhkan dalam setiap order perbulanya?
delivery_time_by_month = all_data['order_delivery_time'].groupby(all_data['Month_order']).median(numeric_only=False) #masukan argumen numeric_only untuk menghitung timedelta

#Membuat visualisasinya
fig=plt.figure(figsize=(16,9))
plt.plot(delivery_time_by_month.index, delivery_time_by_month.values / 86400, marker='o')
plt.title('Median Delivery Time By Month',fontsize=20)
plt.xlabel('Month',fontsize=17)
plt.xticks(#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
         # ['January', 'February', 'March','April', 'Mei', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
          rotation=90)
plt.ylabel('Time (Day)',fontsize=17)
Text(0, 0.5, 'Time (Day)')

#10 kategori produk dengan waktu tercepat mulai dari order sampai diterima customer
order_time_by_category = pd.DataFrame(all_data['order_process_time'].groupby(all_data['product_category_name_english']).median(numeric_only=False).sort_values(ascending=False)[:10])

#Visualiasi
fig=plt.figure(figsize=(16,9))
sns.barplot(y=order_time_by_category.index, x=order_time_by_category['order_process_time'].dt.days)
plt.title('Top 10 Fastest Product Category Order Time',fontsize=20)
plt.xlabel('Order Time (Day)',fontsize=17)
plt.ylabel('Product Category',fontsize=17)
Text(0, 0.5, 'Product Category')

#Berapakah Order setiap bulanya?
order_count_by_month = all_data['order_item_id'].groupby(all_data['Month_order']).sum()

#Visualisasi
fig=plt.figure(figsize=(16,9))
sns.barplot(y=order_count_by_month.values, x=order_count_by_month.index, color="Salmon")
plt.title('Monthly Order',fontsize=20)
plt.xlabel('Month',fontsize=17)
plt.xticks(rotation=90)
plt.ylabel('Amount Order',fontsize=17)
Text(0, 0.5, 'Amount Order')

#Berapakah Revenue setiap bulanya?
revenue_count_by_month = all_data['payment_value'].groupby(all_data['Month_order']).sum()

#Visualisasi
fig=plt.figure(figsize=(16,9))
sns.barplot(y=revenue_count_by_month.values, x=revenue_count_by_month.index, color="Salmon")
plt.title('Monthly Revenue',fontsize=20)
plt.xlabel('Month',fontsize=17)
plt.xticks(rotation=90)
plt.ylabel('Amount Revenue',fontsize=17)
Text(0, 0.5, 'Amount Revenue')

#melihat tanggal awal dan terakhir pembelian 
print('Min : {}, Max : {}'.format(min(all_data.order_purchase_timestamp), max(all_data.order_purchase_timestamp)))

#Menghitung RFM
import datetime as dt
pin_date = max(all_data.order_purchase_timestamp) + dt.timedelta(1)

#Membuat dataframe RFM
rfm = all_data.groupby('customer_unique_id').agg({
    'order_purchase_timestamp' : lambda x: (pin_date - x.max()).days,
    'order_item_id' : 'count', 
    'payment_value' : 'sum'})

#Merubah nama kolom
rfm.rename(columns = {'order_purchase_timestamp' : 'Recency', 
                      'order_item_id' : 'Frequency', 
                      'payment_value' : 'Monetary'}, inplace = True)

rfm.head()
Min : 2017-01-05 11:56:06, Max : 2018-08-29 15:00:37
Recency	Frequency	Monetary
customer_unique_id			
0000366f3b9a7992bf8c76cfdf3221e2	112	1	141.90
0000b849f77a49e4a4ce2b2a4ca5be3f	115	1	27.19
0000f46a3911fa3c0805444483337064	537	1	86.22
0000f6ccb0745a6a4b88665a16c9f078	321	1	43.62
0004aac84e0df4da2b147fca70cf8255	288	1	196.89
#Kita akan menggunakan Inter Quartile Range untuk menangani ouliers
#Menentukan Limit
def limit(i):
    Q1 = rfm[i].quantile(0.5)
    Q3 = rfm[i].quantile(0.95)
    IQR = Q3 - Q1
    
    #menentukan upper limit biasa dan upper limit ekstim
    lower_limit = rfm[i].quantile(0.5) - (IQR * 1.5)
    lower_limit_extreme = rfm[i].quantile(0.5) - (IQR * 3)
    upper_limit = rfm[i].quantile(0.95) + (IQR * 1.5)
    upper_limit_extreme = rfm[i].quantile(0.5) + (IQR * 3)
    print('Lower Limit:', lower_limit)
    print('Lower Limit Extreme:', lower_limit_extreme)
    print('Upper Limit:', upper_limit)
    print('Upper Limit Extreme:', upper_limit_extreme)

#Mengitung persen outliers dari data    
def percent_outliers(i):
    Q1 = rfm[i].quantile(0.5)
    Q3 = rfm[i].quantile(0.95)
    IQR = Q3 - Q1
    
    #menentukan upper limit biasa dan upper limit ekstim
    lower_limit = rfm[i].quantile(0.5) - (IQR * 1.5)
    lower_limit_extreme = rfm[i].quantile(0.5) - (IQR * 3)
    upper_limit = rfm[i].quantile(0.95) + (IQR * 1.5)
    upper_limit_extreme = rfm[i].quantile(0.95) + (IQR * 3)
    #melihat persenan outliers terhadap total data
    print('Lower Limit: {} %'.format(rfm[(rfm[i] >= lower_limit)].shape[0]/ rfm.shape[0]*100))
    print('Lower Limit Extereme: {} %'.format(rfm[(rfm[i] >= lower_limit_extreme)].shape[0]/rfm.shape[0]*100))
    print('Upper Limit: {} %'.format(rfm[(rfm[i] >= upper_limit)].shape[0]/ rfm.shape[0]*100))
    print('Upper Limit Extereme: {} %'.format(rfm[(rfm[i] >= upper_limit_extreme)].shape[0]/rfm.shape[0]*100))
#Melihat outliers pada kolom Recency
sns.boxplot(x=rfm["Recency"])
<matplotlib.axes._subplots.AxesSubplot at 0x7fb22c0944d0>

#Melihat ouliers pada kolom Frequency
sns.boxplot(x=rfm["Frequency"])
<matplotlib.axes._subplots.AxesSubplot at 0x7fb22b273fd0>

#Melihat ouliers pada kolom Monetary
sns.boxplot(x=rfm["Monetary"])
<matplotlib.axes._subplots.AxesSubplot at 0x7fb2305d4410>

print(limit('Monetary'))
print('-'*50)
print(percent_outliers('Monetary'))
Lower Limit: -712.2472499999997
Lower Limit Extreme: -1537.3244999999995
Upper Limit: 1487.9587499999996
Upper Limit Extreme: 1762.9844999999993
None
--------------------------------------------------
Lower Limit: 100.0 %
Lower Limit Extereme: 100.0 %
Upper Limit: 1.242161119150989 %
Upper Limit Extereme: 0.5404990571416042 %
None
#Menghilangkan outliers pada kolom Monetary yang lebih dari 1500 karena diluar dari 95% batas maksimal atas persebaran data
outliers1_drop = rfm[(rfm['Monetary'] > 1500)].index
rfm.drop(outliers1_drop, inplace=True)
#Membuat group customer berdasarkan Recency, Frequency, dan Monetary
#Karena Recency jika semakin sedikit harinya semakin bagus, maka akan membuat urutanya secara terbalik
r_labels = range(3, 0, -1)
r_groups = pd.qcut(rfm.Recency, q = 3, labels = r_labels).astype('int')

#Karena Frequency sangat banyak pada nilai 1, maka tidak bisa menggunakan qcut, 
#karena nilainya akan condong ke yang paling banyak
f_groups = pd.qcut(rfm.Frequency.rank(method='first'), 3).astype('str')
#rfm['F'] = np.where((rfm['Frequency'] != 1) & (rfm['Frequency'] != 2), 3, rfm.Frequency)

m_labels = range(1, 4)
m_groups = pd.qcut(rfm.Monetary, q = 3, labels = m_labels).astype('int')
#Membuat kolom berdasarkan group yang telah dibuat
rfm['R'] = r_groups.values
rfm['F'] = f_groups.values
rfm['M'] = m_groups.values
#Merubah input kolom F menjadi categorical
rfm['F'] = rfm['F'].replace({'(0.999, 30871.333]' : 1,
                             '(30871.333, 61741.667]' : 2,
                             '(61741.667, 92612.0]' : 3}).astype('int')
                             
#Menggabungkan ketiga kolom tersebut
rfm['RFM_Segment'] = rfm.apply(lambda x: str(x['R']) + str(x['F']) + str(x['M']), axis = 1)
rfm['RFM_Score'] = rfm[['R', 'F', 'M']].sum(axis = 1)
rfm.head()
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-46-04ea738800bd> in <module>()
      2 rfm['F'] = rfm['F'].replace({'(0.999, 30871.333]' : 1,
      3                              '(30871.333, 61741.667]' : 2,
----> 4                              '(61741.667, 92612.0]' : 3}).astype('int')
      5 
      6 #Menggabungkan ketiga kolom tersebut

/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py in astype(self, dtype, copy, errors)
   5813         else:
   5814             # else, only a single dtype is given
-> 5815             new_data = self._mgr.astype(dtype=dtype, copy=copy, errors=errors)
   5816             return self._constructor(new_data).__finalize__(self, method="astype")
   5817 

/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py in astype(self, dtype, copy, errors)
    416 
    417     def astype(self: T, dtype, copy: bool = False, errors: str = "raise") -> T:
--> 418         return self.apply("astype", dtype=dtype, copy=copy, errors=errors)
    419 
    420     def convert(

/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py in apply(self, f, align_keys, ignore_failures, **kwargs)
    325                     applied = b.apply(f, **kwargs)
    326                 else:
--> 327                     applied = getattr(b, f)(**kwargs)
    328             except (TypeError, NotImplementedError):
    329                 if not ignore_failures:

/usr/local/lib/python3.7/dist-packages/pandas/core/internals/blocks.py in astype(self, dtype, copy, errors)
    589         values = self.values
    590 
--> 591         new_values = astype_array_safe(values, dtype, copy=copy, errors=errors)
    592 
    593         new_values = maybe_coerce_values(new_values)

/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py in astype_array_safe(values, dtype, copy, errors)
   1307 
   1308     try:
-> 1309         new_values = astype_array(values, dtype, copy=copy)
   1310     except (ValueError, TypeError):
   1311         # e.g. astype_nansafe can fail on object-dtype of strings

/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py in astype_array(values, dtype, copy)
   1255 
   1256     else:
-> 1257         values = astype_nansafe(values, dtype, copy=copy)
   1258 
   1259     # in pandas we don't store numpy str dtypes, so convert to object

/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py in astype_nansafe(arr, dtype, copy, skipna)
   1172         # work around NumPy brokenness, #1987
   1173         if np.issubdtype(dtype.type, np.integer):
-> 1174             return lib.astype_intsafe(arr, dtype)
   1175 
   1176         # if we have a datetime/timedelta array of objects

/usr/local/lib/python3.7/dist-packages/pandas/_libs/lib.pyx in pandas._libs.lib.astype_intsafe()

ValueError: invalid literal for int() with base 10: '(0.999, 30031.0]'
#Membuat label berdasarkan RFM_Score
score_labels = ['Bronze', 'Silver', 'Gold']
score_groups = pd.qcut(rfm.RFM_Score, q=3, labels = score_labels)
rfm['RFM_Level'] = score_groups.values
rfm.head()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-47-e660fa56c84a> in <module>()
      1 #Membuat label berdasarkan RFM_Score
      2 score_labels = ['Bronze', 'Silver', 'Gold']
----> 3 score_groups = pd.qcut(rfm.RFM_Score, q=3, labels = score_labels)
      4 rfm['RFM_Level'] = score_groups.values
      5 rfm.head()

/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py in __getattr__(self, name)
   5485         ):
   5486             return self[name]
-> 5487         return object.__getattribute__(self, name)
   5488 
   5489     def __setattr__(self, name: str, value) -> None:

AttributeError: 'DataFrame' object has no attribute 'RFM_Score'
#Visualisasi nilai RFM
fig, ax = plt.subplots(figsize=(16, 9))
plt.subplot(3, 1, 1); sns.distplot(rfm.Recency, label = 'Recency')
plt.subplot(3, 1, 2); sns.distplot(rfm['Frequency'], kde_kws={'bw': 0.1}, label='Frequency')
plt.subplot(3, 1, 3); sns.distplot(rfm.Monetary, label = 'Monetary')

plt.tight_layout()
plt.show()
#Membuat distribusi data menjadi normal
from scipy import stats

rfm_log = rfm[['Recency', 'Monetary']].apply(np.log, axis = 1).round(3)
rfm_log['Frequency'] = stats.boxcox(rfm['Frequency'])[0]
rfm_log.head()
#Membuat semua data dala ukuran yang sama dengan cara scaling
scaler = StandardScaler()
minmax = MinMaxScaler()
rfm_scaled = scaler.fit_transform(rfm_log)
#Membuat dataframe baru setelah di-scaling
rfm_scaled = pd.DataFrame(rfm_scaled, index = rfm.index, columns = rfm_log.columns)
rfm_scaled.head()
#Visualisasi kembali RFM setalah log transformasi dan scaling
fig, ax = plt.subplots(figsize=(16, 9))
plt.subplot(3, 1, 1); sns.distplot(rfm_scaled.Recency, label = 'Recency')
plt.subplot(3, 1, 2); sns.distplot(rfm_scaled.Frequency, kde_kws={'bw': 0.1}, label='Frequency')
plt.subplot(3, 1, 3); sns.distplot(rfm_scaled.Monetary, label = 'Monetary')

plt.tight_layout()
plt.show()
#Mencari titik optimal cluster dengan ELbow Method
wcss = {}

for i in range(1, 11):
    kmeans = KMeans(n_clusters= i, init= 'k-means++', max_iter= 300)
    kmeans.fit(rfm_scaled)
    wcss[i] = kmeans.inertia_
    
#Visualisasi Elbow Method
fig, ax = plt.subplots(figsize=(16, 9))
sns.pointplot(x = list(wcss.keys()), y = list(wcss.values()))
plt.title('Elbow Method')
plt.xlabel('K Numbers')
plt.ylabel('WCSS')
plt.show()
#Memilih n_clusters = 4 sesuai dengan elbow method
clus = KMeans(n_clusters= 2, n_init=10, init= 'k-means++', max_iter= 300)
clus.fit(rfm_scaled)

#Mausukka hasil cluster ke data rfm awal
rfm['K_Cluster'] = clus.labels_
rfm.head()
#Memilih n_clusters = 4 sesuai dengan elbow method
clus = KMeans(n_clusters= 2, n_init=10, init= 'k-means++', max_iter= 300)
clus.fit(rfm_scaled)
#Mausukka hasil cluster ke data rfm awal
rfm['K_Cluster'] = clus.labels_
rfm.head()
#Visualisasi Silhouette Analysis
visualizer = SilhouetteVisualizer(clus)

visualizer.fit(rfm_scaled) 
visualizer.poof()
#Masukkan semua ke dalam data yang sudah di scaling 
rfm_scaled['K_Cluster'] = clus.labels_
rfm_scaled['RFM_Level'] = rfm.RFM_Level
rfm_scaled.reset_index(inplace = True)
rfm_scaled.head()
#melting data frame yang telah dibuat
rfm_melted = pd.melt(frame= rfm_scaled, id_vars= ['customer_unique_id', 'RFM_Level', 'K_Cluster'], 
                     var_name = 'Metrics', value_name = 'Value')
rfm_melted.head()
#Visualisasi snake plot
fig, ax = plt.subplots(figsize=(16, 9))
sns.lineplot(x = 'Metrics', y = 'Value', hue = 'RFM_Level', data = rfm_melted)
plt.title('Snake Plot of RFM')
plt.legend(loc = 'upper right')
#Visualisasi snake plot dengan K-Means
fig, ax = plt.subplots(figsize=(16, 9))
sns.lineplot(x = 'Metrics', y = 'Value', hue = 'K_Cluster', data = rfm_melted)
plt.title('Snake Plot of K_cluster')
plt.legend(loc = 'upper right')
#Berapaka jumlah customer berdasarkan kategorinya?
rfm_cus_level = rfm_scaled.groupby('RFM_Level')['customer_unique_id'].nunique().reset_index()

#Visualisasi
fig=plt.figure(figsize=(16,9))
sns.barplot(y=rfm_cus_level['customer_unique_id'], x=rfm_cus_level['RFM_Level'], palette="Greens_d")
plt.title('Customer Based on RFM Level',fontsize=20)
plt.xlabel('RFMLevel',fontsize=17)
plt.ylabel('Amount of Customer',fontsize=17)
